---

- hosts: kubernetes_workers
  become: yes
  tags: [ never, reset ]
  tasks:
    - name: Reset kubernetees
      shell: |
        kubeadm reset -f
        #weave reset
        #rm -f /opt/cni/bin/weave-*
        ip link del cni0
        ip link del flannel.1
        ip link del weave
        iptables -F
        iptables -t nat -F
        iptables -t mangle -F
        iptables -X
        ipvsadm -C
        systemctl restart networking
    - name: Uninstall kubernetes
      apt:
        name: ['kubeadm', 'kubelet', 'kubectl']
        state: absent
        purge: yes
    - name: Delete kubernetes configs
      file:
        state: absent
        path: /etc/kubernetes

- hosts: kubernetes_masters
  become: yes
  tags: [ never, reset ]
  tasks:
    - name: Reset kubernetees
      shell: |
        kubeadm reset -f
        #weave reset
        #rm -f /opt/cni/bin/weave-*
        ip link del cni0
        ip link del flannel.1
        iptables -F
        iptables -t nat -F
        iptables -t mangle -F
        iptables -X
        ipvsadm -C
        systemctl restart networking
    - name: Uninstall kubernetes
      apt:
        name: ['kubeadm', 'kubelet', 'kubectl']
        state: absent
        purge: yes
    - name: Delete kubernetes configs
      file:
        state: absent
        path: /etc/kubernetes

- hosts: kubernetes
  tags: [ never, reboot ]
  become: yes
  tasks:
    - reboot:

- hosts: kubernetes
  remote_user: pi
  become: yes
  tags: [ never, init ]
  tasks:
    - name: Setup passwordless sudo for my user
      lineinfile:
        path: /etc/sudoers.d/10-alan-nopasswd
        line: 'alan ALL=(ALL) NOPASSWD: ALL'
        create: yes
        validate: 'visudo -cf %s'
    - name: Add my user
      user:
        name: alan
        state: present
        append: yes
        groups:
          - adm
          - audio
          - cdrom
          - dialout
          - games
          - gpio
          - i2c
          - input
          - netdev
          - plugdev
          - spi
          - sudo
          - users
          - video
    - name: Add SSH key to my user
      authorized_key:
        user: alan
        state: present
        key: "{{ lookup('file', '/home/alan/git/ssh_keys/id_personal.pub') }}"
    - name: Configure kernel params for groups
      copy: content="console=serial0,115200 console=tty1 root=PARTUUID=6c586e13-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory" dest=/boot/cmdline.txt
    - name: Kill Pis running processes
      remote_user: alan
      shell: kill -9 $(ps -eo pid,user,comm | awk '/pi/ { print $1; }')
    - name: Remove Pi user
      remote_user: alan
      user:
        name: pi
        state: absent
        remove: yes
    - name: Reboot
      remote_user: alan
      reboot:

- hosts: kubernetes
  tags: install
  become: yes
  tasks:
    - name: Add Docker repo apt-key
      apt_key:
        url: https://download.docker.com/linux/raspbian/gpg
        state: present
    - name: Install docker repo
      apt_repository:
        repo: deb https://download.docker.com/linux/raspbian buster stable
        state: present
    - name: Ensure kubernetes dependencies are installed
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - aptitude
        - arptables
        - docker.io
        - ebtables
        - ethtool
        - iproute2
        - iptables
        - ipvsadm
        - python-pip
        - python3-pip
        - runc
        - socat
    - name: Add kubernetes repo apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
    - name: Ensure kubernetes repo is setup
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
    - name: Install kubernetes components
      apt:
        name: [
          # 'kubeadm=1.6.0-00',
          # 'kubelet=1.6.0-00',
          # 'kubectl=1.6.0-00'
          'kubeadm',
          'kubelet',
          'kubectl'
        ]
        state: present
        update_cache: yes
    - name: Check if swap enabled
      shell: test "$(swapon -s | wc -l)" -gt "1"
      args:
        executable: /bin/bash
      changed_when: False
      ignore_errors: yes
      register: swap_enabled
    - name: Disable swap
      shell: |
        dphys-swapfile swapoff
        dphys-swapfile uninstall
      when: swap_enabled.rc == 0
    - name: Ensure dphys-swapfile disabled
      service:
        name: dphys-swapfile
        enabled: no
        state: stopped

- hosts: kubernetes
  become: yes
  become_user: root
  tasks:
  - name: Set hostname
    hostname:
      name: "{{ inventory_hostname }}"
  - name: Configure docker to use systemd cgroup driver
    template:
      src: /etc/ansible/templates/docker/docker-daemon-kubernetes.json
      dest: /etc/docker/daemon.json
  - name: Populate /etc/hosts
    lineinfile:
      path: /etc/hosts
      line: "{{ ansible_facts['eth0']['ipv4']['address'] }}       {{ inventory_hostname }}"
  - name: Docker service started and enabled
    service:
      name: docker
      state: restarted
      enabled: yes
  - name: Enable netfilter on bridges
    block:
      - sysctl:
          name: net.bridge.bridge-nf-call-ip6tables
          value: '1'
      - sysctl:
          name: net.bridge.bridge-nf-call-iptables
          value: '1'
      - sysctl:
          name: net.bridge.bridge-nf-call-arptables
          value: '1'
  - name: Ensure legacy iptables backends are in use
    block:
      - command: update-alternatives --set iptables /usr/sbin/iptables-legacy
      - command: update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
      - command: update-alternatives --set arptables /usr/sbin/arptables-legacy
      - command: update-alternatives --set ebtables /usr/sbin/ebtables-legacy
  - name: Install unbound
    apt:
      name: unbound
      state: absent
  - name: resolvconf
    lineinfile:
      path: /etc/resolv.conf
      line: 'nameserver 192.168.86.1'
  - name: Pip dependencies
    pip:
      name:  ['openshift', 'kubernetes-validate']
      executable: pip3

- hosts: kubernetes_masters
  become: yes
  tasks:
    # - name: Pull kubernetes containers
    #   command: kubeadm config images pull -v3
    - name: Configure docker to use systemd cgroup driver
      template:
        src: /etc/ansible/templates/kubernetes/kubeadm-init-master-config.yml
        dest: /etc/kubernetes/kubeadm-config.yml
    - name: Initialise Kubernetes master
      command: kubeadm init --config /etc/kubernetes/kubeadm-config.yml
      args:
        creates: /var/lib/kubelet/config.yaml
    - name: Setup kubeconfig
      become: no
      changed_when: False
      shell: |
        mkdir -p $HOME/.kube
        sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
    - name: Copy admin config to local system
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: /home/alan/.kube/config
        flat: yes
    - name: Setup flannel CNI
      k8s:
        state: present
        definition: "{{lookup('file', '/etc/ansible/files/kubernetes/flannel/kube-flannel.yml')}}"
        kubeconfig: /etc/kubernetes/admin.conf
        validate:
          fail_on_error: yes
          strict: yes
    - name: Setup Kubernetes Dashboard
      k8s:
        state: present
        definition: "{{lookup('file', '/etc/ansible/files/kubernetes/kubernetes-dashboard/kubernetes-dashboard.yaml')}}"
        kubeconfig: /etc/kubernetes/admin.conf
        validate:
          fail_on_error: yes
          strict: yes
    - name: Setup Helm Tiller
      k8s:
        state: present
        definition: "{{lookup('file', '/etc/ansible/files/kubernetes/helm-tiller/tiller.yaml')}}"
        kubeconfig: /etc/kubernetes/admin.conf
        validate:
          fail_on_error: yes
          strict: yes
    - name: Setup MetalLB
      k8s:
        state: present
        definition: "{{lookup('file', '/etc/ansible/files/kubernetes/metallb/metallb.yaml')}}"
        kubeconfig: /etc/kubernetes/admin.conf
        validate:
          fail_on_error: yes
          strict: yes
    - name: Get k8s join command
      shell: kubeadm token create --print-join-command
      changed_when: False
      register: k8s_join_command

- hosts: kubernetes_workers
  become: yes
  tasks:
    - name: Check if node has joined
      shell: test -f /etc/kubernetes/kubelet.conf
      ignore_errors: yes
      register: node_joined
    - name: Join cluster
      shell: "{{ hostvars['k8s-master-01']['k8s_join_command']['stdout'] }}"
      when: node_joined.rc == 1

- hosts: kubernetes
  become: yes
  tasks:
    - name: Ensure kubelet is enabled
      service:
        name: kubelet
        enabled: yes
        state: started

- hosts: kubernetes_masters
  tags: [ "applications" ]
  become: yes
  tasks:
    - name: Ensure applications are all installed
      block:
        - name: Motioneye
          k8s:
            state: present
            definition: "{{lookup('file', '/etc/ansible/files/kubernetes/motioneye/deployment.yaml')}}"
            kubeconfig: /etc/kubernetes/admin.conf
            validate:
              fail_on_error: yes
              strict: yes